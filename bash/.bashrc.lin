# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=100000
HISTFILESIZE=200000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Catppuccin Mocha カラーコード
BASE="#1e1e2e"  # 背景色
TEXT="#cdd6f4"  # 基本テキスト色
PINK="#f5c2e7"  # 強調色1
MAUVE="#cba6f7" # 強調色2

# TrueColor対応プロンプト
if [[ "$TERM" =~ "256color" ]]; then
    PS1='\\[\e[38;2;205;214;244m\\]\u@\h \\[\e[38;2;203;166;247m\\]\w\\[\e[0m\\] \$ '
else
    PS1='\u@\h:\w\$ '  # フォールバック用
fi

eval "$(dircolors -b ~/.dircolors)"

LS_COLORS="fi=38;5;216"
export LS_COLORS
alias ls='ls --color=auto'

# set a fancy prompt (non-color, unless we know we "want" color)
#case "$TERM" in
#    xterm-color|*-256color) color_prompt=yes;;
#esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

#if [ -n "$force_color_prompt" ]; then
#    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
#	color_prompt=yes
#    else
#	color_prompt=
#    fi
#fi

#if [ "$color_prompt" = yes ]; then
#    PS1='${debian_chroot:+($debian_chroot)}\\[\033[01;32m\\]\u@\h\\[\033[00m\\]:\\[\033[01;34m\\]\w\\[\033[00m\\]\$ '
#else
#    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
#fi
#unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
term*|rxvt*)
    PS1="\\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
#    alias dir='dir --color=auto'
#    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -l'
alias w3m='w3m -B'
# open explorer
alias open='/mnt/c/windows/explorer.exe .'
alias afxw='"/mnt/c/bin/afxw/afxw.exe" & disown'
alias lg="lazygit"

# trans
#trans() {
#    trans -sl=en -tl=ja "$@"
#}

transej() {
    echo "入力どうぞ:"
    read -r input_text
    trans -sl=en -tl=ja "$input_text"
}

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
#[ -r /home/elpeople/.byobu/prompt ] && . /home/elpeople/.byobu/prompt   #byobu-prompt#
# if [ $(service docker status | awk '{print $4}') = "not" ]; then
#   sudo service docker start > /dev/null
# fi
# ranger settings
# Compatible with ranger 1.5.3 through 1.7.*
#
# Change the prompt when you open a shell from inside ranger
#
# Add this line to your .bashrc for it to work.

[ -n "$RANGER_LEVEL" ] && PS1="$PS1"'(in ranger) '

# ranger_cd
ranger_cd() {
    temp_file="$(mktemp -t "ranger_cd.XXXXXXXXXX")"
    ranger --choosedir="$temp_file" -- "${@:-$PWD}"
    if chosen_dir="$(cat -- "$temp_file")" && [ -n "$chosen_dir" ] && [ "$chosen_dir" != "$PWD" ]; then
        cd -- "$chosen_dir"
    fi
    rm -f -- "$temp_file"
}

# This binds Ctrl-O to ranger_cd:
if which ranger >& /dev/null && [[ -t 1 ]]; then
    bind '"\C-o":"ranger_cd\C-m"'
fi

# auto start tmux
tmux_count=$(ps -ax | grep '[t]mux' | wc -l)
if [ $SHLVL = 3 ]; then
    if [ $tmux_count = 0 ]; then
        tmux -u new-session
    elif [ $tmux_count = 1 ]; then
        tmux -u attach
    fi
fi

export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_STATE_HOME="${HOME}/.local/state"
# FZF_DEFAULT_OPTS_FILEをXDG準拠の構成にポイントさせる
export FZF_DEFAULT_OPTS_FILE="$HOME/dotfiles/fzf-config/.config/fzf/fzf.conf"
# fzfバイナリが非標準のサブモジュール場所にあるため、PATHに含める
export PATH="$HOME/dotfiles/fzf/.config/fzf:$PATH"
export EDITOR=vim
export SCREENDIR=$HOME/.screen
#export PATH=/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/home/linuxbrew/.linuxbrew/bin
export PATH="$PATH:/usr/local/games:/usr/games:/home/linuxbrew/.linuxbrew/bin"

#source /usr/share/doc/fzf/examples/key-bindings.bash

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
